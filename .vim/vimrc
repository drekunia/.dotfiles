" --- Basic Settings ---

set nocompatible        " Use Vim defaults (not Vi)
set wrap                " wrap lines
set mouse=a             " enable mouse support (might not work well on Mac OS X)
set wildmenu            " visual autocomplete for command menu
set wildmode=longest:full,full " Sets the completion mode for the command line
set lazyredraw          " redraw screen only when we need to
set showmatch           " highlight matching parentheses / brackets [{()}]
set laststatus=2        " always show statusline (even with only single window)
set ruler               " show line and column number of the cursor on right side of statusline
" set visualbell          " blink cursor on error, instead of beeping

" Leader key
let mapleader = " "     " Set leader to space
let maplocalleader = " "

" Clipboard
set clipboard=unnamedplus " Use system clipboard

" Searching
set nohlsearch " Highlight search results (different from your Neovim config)
set incsearch " Incremental search
set ignorecase " Case-insensitive search
set smartcase " Case-sensitive if uppercase in pattern

" Encoding
set encoding=utf-8
set fileencoding=utf-8 " Sets the file encoding to UTF-8

" --- Appearance ---

set number               " Show line numbers
set relativenumber       " Show relative line numbers
" set signcolumn=yes       " Always show the sign column
set scrolloff=8          " Keep 8 lines above/below the cursor
set sidescrolloff=8      " Keep 8 columns left/right of the cursor
set showtabline=2        " Always shows the tab line
" set colorcolumn=80       " Add a vertical line at column 80
set conceallevel=0       " Shows all concealed text (no concealment)
set foldlevel=99         " Sets the initial fold level (how many levels of folds are open)
set splitbelow           " Opens new windows below the current window
set splitright           " Opens new windows to the right of the current window
set winminwidth=5        " Sets the minimum width of a window
set pumheight=10         " Sets the maximum height of the popup menu
set nocursorline         " Disables highlighting of the current line
" set cursorline           " highlight current line
" set background=dark      " configure Vim to use brighter colors
" set title                " Shows the current file's title in the window title bar

" --- Formatting ---

set autoindent " Auto indent
set smartindent " Smart indent
set breakindent " Indent wrapped lines
set linebreak " Breaks lines at word boundaries
set tabstop=2 " 2 spaces for tabs
set softtabstop=2 " 2 spaces for soft tabs
set shiftwidth=2 " 2 spaces for indent
set shiftround " Rounds indentation to a multiple of 'shiftwidth'
set expandtab " Use spaces instead of tabs
set nowrap " Disables line wrapping
let g:markdown_recommended_style = 0 " Disables markdown recommended style

" --- File Handling ---

set nobackup " Disable backups
set nowritebackup " Disable write backups
set undofile " Enable persistent undo
set undodir=$HOME/.vim/undodir/vim " Set the undo directory
set undolevels=10000     " Sets the maximum number of undo levels
set noswapfile " Disable swap files
set isfname+=@-@         " Adds '@' and '-' to the list of valid characters in filenames
" let g:netrw_dirhistmax = 0

"""" Miscellaneous settings that might be worth enabling

set autoread           " autoreload the file in Vim if it has been changed outside of Vim
set autowrite             " Automatically save files before certain actions (e.g., running commands)
set confirm              " Asks for confirmation before exiting if there are unsaved changes
set formatoptions=jcroqlnt " Options for formatting text (see :help fo-table)
set grepformat=%f:%l:%c:%m " Format for grep search results
set grepprg=rg\ --vimgrep " Use 'rg' (ripgrep) for searching
set spelllang=en         " Sets the spellcheck language to English
set timeoutlen=300       " Sets the timeout for key sequences (milliseconds)
set updatetime=200       " Sets how often Vim checks for changes (milliseconds)
set virtualedit=block    " Allows the cursor to move past the end of a line in visual block mode

" --- Keymaps ---

"""" LazyVim keymaps

" move vertically by visual line (don't skip wrapped lines)
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> <Down> v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> <Up> v:count == 0 ? 'gk' : 'k'

" Move to window using the <ctrl> hjkl keys
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Resize window using <ctrl> arrow keys
nnoremap <C-Up> <cmd>resize +2<cr>
nnoremap <C-Down> <cmd>resize -2<cr>
nnoremap <C-Left> <cmd>vertical resize -2<cr>
nnoremap <C-Right> <cmd>vertical resize +2<cr> Â 

" Move text up/down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
nnoremap J :execute 'move .+' . v:count1<cr>==
nnoremap K :execute 'move .-' . (v:count1 + 1)<cr>==

" Buffers
nnoremap <S-h> :bprevious<cr>
nnoremap <S-l> :bnext<cr>
nnoremap [b :bprevious<cr>
nnoremap ]b :bnext<cr>
nnoremap <leader>bb :e #<cr>
nnoremap <leader>` :e #<cr>
nnoremap <leader>bd :bd<cr>
nnoremap <leader>bD :bd!<cr>

" Clear search with <esc>
inoremap <esc> <cmd>noh<cr><esc>
nnoremap <esc> <cmd>noh<cr><esc>

" Clear search, diff update and redraw
nnoremap <leader>ur <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>

" Find and center
nnoremap n nzzzv
nnoremap N Nzzzv

" Add undo break-points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ; ;<c-g>u

" Save file
nnoremap <C-s> :w<cr><esc>
inoremap <C-s> <esc>:w<cr>i
xnoremap <C-s> <esc>:w<cr>gv
snoremap <C-s> <esc>:w<cr>

" Stay in indent mode
vnoremap < <gv
vnoremap > >gv

" New file
nnoremap <leader>fn :enew<cr>

" Location and Quickfix Lists
nnoremap <leader>xl :lopen<cr>
nnoremap <leader>xq :copen<cr>

nnoremap [q :cprev<cr>
nnoremap ]q :cnext<cr>

" Quit
nnoremap <leader>qq :qa<cr>

" Terminal Mappings
tnoremap <C-/> <cmd>close!<cr>
tnoremap <c-_> <cmd>close!<cr>

" Windows
nnoremap <leader>w <c-w>
nnoremap <leader>- <C-W>v
" nnoremap <leader>- <C-W>s
" nnoremap <leader>| <C-W>v
nnoremap <leader>wd <C-W>c

" Tabs
nnoremap <leader><tab>l :tablast<cr>
nnoremap <leader><tab>o :tabonly<cr>
nnoremap <leader><tab>f :tabfirst<cr>
nnoremap <leader><tab><tab> :tabnew<cr>
nnoremap <leader><tab>] :tabnext<cr>
nnoremap <leader><tab>d :tabclose<cr>
nnoremap <leader><tab>[ :tabprevious<cr>

" Toggle options (no plugins)
nnoremap <leader>us :set spell!<cr>
nnoremap <leader>uw :set wrap!<cr>
nnoremap <leader>uL :set relativenumber!<cr>
nnoremap <leader>ul :set number!<cr>


" Lazygit (no plugins - uses external command)
if executable('lazygit')
  nnoremap <leader>gg :!lazygit<cr>
  nnoremap <leader>gG :!lazygit<cr>
endif

"""" Additions

" Delete without copying
nnoremap x "_x
vnoremap x "_x

" Scroll and center
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Move to EOL/BOL
nnoremap E $
nnoremap B ^

" Exit insert mode with jk, kj, jj, kk
inoremap jk <Esc>
inoremap kj <Esc>

" Map <C-c> to <Esc> in insert mode
inoremap <C-c> <Esc>

" Paste without affecting registers
vnoremap p "_dP

" Change text without affecting registers
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
vnoremap C "_C

" Tab navigation
nnoremap <Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprev<CR>
